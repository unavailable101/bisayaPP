/*
    grammar

    < program >             ->      START_PROG < statements > END_PROG

    < statements >          ->      < statement > | < statements >
    -- each line is a statement already, so mahug automatic shag new line

    < statement >           ->      < output_statement >  |
                                    < input_statement >   |
                                    < var_declare >       |
                                    < expr_statement >

    < expr_statement >      ->      < expression >

    < var_declare >         ->      VAR_DECLARATION < data_type >  ( IDENTIFIER | < assign > (COMMA < assign >)* )

    < data_type >           ->      "NUMERO" | "lETRA" | "TIPIK" | "TINUOD" | "PISI"

    < expression >          ->      < literal >              |
                                    IDENTIFIER               |
                                    < unary_expression >     |
                                    < binary_operation >     |
                                    < compare_operation >    |
                                    < logic_operation >      |
                                    < group_expression >     |
                                    < assign >

    < assign >              ->      IDENTIFIER ASSIGN_OP ( < assign > | < expression >)

    < literal >             ->      INTEGER | DOUBLE | STRING | CHARACTERS | BOOLEAN

    < unary_expression >    ->      ( ARITH_ADD | ARITH_MINUS ) ( < literal>  | IDENTIFIER )

    < binary_operation >    ->      < expression > < arith_operator > < expression >

    < arith_operators >     ->      ADD | MINUS | MULT | DIV | MOD

    < compare_operation >   ->      < expression > < compare_operator > < expression >

    < compare_operators >   ->      GT | LT | GOE | LOE | EQUAL | NOT_EQUAL

    < group_expression >    ->      OPEN_P < expression > CLOSE_P

    < logic_operation >     ->      < expression > < logic_operators > < expression >

    < logic_operators >     ->      AND | OR | NOT

    < output_statement >    ->      OUTPUT COLON < expression >

    < input_statement >     ->      INPUT COLON IDENTIFIER (COMMA IDENTIFIER)*

*/