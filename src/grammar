/*
    grammar

    < program >             ->      START_PROG < statements > END_PROG

    < statements >          ->      < statement > | < statements >
    -- each line is a statement already, so mahug automatic shag new line

    < statement >           ->      < output_statement >    |
                                    < input_statement >     |
                                    < var_declare >         |
                                    < block_statement >     |
                                    < if_statement >        |
                                    < while_statement >     |
                                    < break_statement >     |
                                    < continue_statement >  |
                                    < expr_statement >

    < expr_statement >      ->      < expression >

    < var_declare >         ->      VAR_DECLARATION < data_type >  ( IDENTIFIER | < assign > (COMMA < assign >)* )

    < data_type >           ->      "NUMERO" | "lETRA" | "TIPIK" | "TINUOD" | "PISI"

    < expression >          ->      < primary >              |
                                    < unary_expression >     |
                                    < binary_operation >     |
                                    < compare_operation >    |
                                    < compare_operation >    |
                                    < logic_operation >      |
                                    < group_expression >     |
                                    < assign >

    < primary >             ->      < literal > | IDENTIFIERS

    < assign >              ->      IDENTIFIER ASSIGN_OP ( < assign > | < expression >)

    < literal >             ->      INTEGER | DOUBLE | STRING | CHARACTERS | BOOLEAN

    < unary_expression >    ->      ( ARITH_ADD | ARITH_MINUS ) ( < literal>  | IDENTIFIER )

    < binary_operation >    ->      < expression > < arith_operator > < expression >

    < arith_operators >     ->      ADD | MINUS | MULT | DIV | MOD

    < compare_operation >   ->      < expression > < compare_operator > < expression >

    < compare_operators >   ->      GT | LT | GOE | LOE | EQUAL | NOT_EQUAL

    < group_expression >    ->      OPEN_P < expression > CLOSE_P

    < logic_operation >     ->      < expression > < logic_operators > < expression >

    < logic_operators >     ->      AND | OR | NOT

    < output_statement >    ->      OUTPUT COLON < expression >

    < input_statement >     ->      INPUT COLON IDENTIFIER (COMMA IDENTIFIER)*

    < if_statement >        ->      IF ARITH_OPEN_P < BOOL expression> ARITH_CLOSE_P < block_statement >

    < while_statement >     ->      WHILE ARITH_OPEN_P < BOOL expression > ARITH_CLOSE_P < block_statement >

    < block_statement >     ->      BLOCK OPEN_BRACES < statements > CLOSE_BRACES

*/

// for code in Parser class sa expression na part
// si expression man ang libog
// di kaybaw mu express og tarong
< expression >          ->      < assignment >

< assignment >          ->      < logical_or >
                                ( IDENTIFIER ASSIGN_OP < value > ) ?

< value >               ->      < assignment >

< logical_or >          ->      < logical_and > ( OR < logical_and > )*

< logical_and >         ->      < concatenation > ( AND < concatenation > )*

< concatenation >         ->      < equal > ( & < equal > )*

< equal >               ->      < comparison > ( ( == | <> ) < comparison > ) *

< comparison >          ->      < term > ( ( GT | LT | GOE | LOE ) < term >)*

< term >                ->      < factor >  ( ( ADD | MINUS ) < factor > )*

< factor >              ->      < unary > ( ( MULT | DIV | MOD ) < unary > )*

< unary >               ->      ( ( ADD | MINUS | LOG_NOT ) < unary > )?
                                < primary >

< primary >             ->      < literal >     |
                                IDENTIFIER      |
                                OPEN_P < expression > CLOSE_P